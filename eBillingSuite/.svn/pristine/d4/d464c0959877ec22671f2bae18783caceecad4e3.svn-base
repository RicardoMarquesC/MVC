using eBillingSuite.Model;
using Ninject;
using Shortcut.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using eBillingSuite.Model.EBC_DB;

namespace eBillingSuite.Repositories
{
    public class ComATPacketRepository : IComATPacketsRepository
    {
        public ComATPacketRepository()
        {
        }
        /// <summary>
        /// Obtém todos os pacotes comunicados à AT
        /// </summary>
        /// <returns>Lista com os pacotes</returns>
        public List<ComATPackets> GetAllPackets()
        {
            List<ComATPackets> finalList;

            try
            {
                using (EBC_DB entidadeEBC = new EBC_DB())
                {
                    finalList = entidadeEBC.ComATPackets.OrderByDescending(x => x.LastSentDate).ToList();
                }
            }
            catch (Exception e)
            {
                throw;
            }
            return finalList;
        }

        public List<ComATPackets> GetFilteredComATPackets(string pesquisa, string dateRange, string state, string numDoc, string nifRecetor)
        {
            List<ComATPackets> newlist;
            if (!String.IsNullOrWhiteSpace(pesquisa))
                pesquisa = pesquisa.ToLower();
            try
            {
                using (EBC_DB entidadeEBC = new EBC_DB())
                {
                    DateTime tmp;
                    if (DateTime.TryParse(pesquisa, out tmp))
                    {
                        tmp = tmp.Date;
                    }

                    IQueryable<ComATPackets> query = entidadeEBC.ComATPackets;

                    char[] delimitador = { '-' };
                    if (!String.IsNullOrWhiteSpace(dateRange))
                    {
                        DateTime dI;
                        DateTime dF;
                        var dateI = dateRange.Split(delimitador)[0];
                        if (DateTime.TryParse(dateI, out dI))
                        {
                            dI = dI.Date;
                        }
                        var dateF = dateRange.Split(delimitador)[1];
                        if (DateTime.TryParse(dateF, out dF))
                        {
                            dF = dF.Date;
                        }

                        query = query.Where(gt => (System.Data.Entity.DbFunctions.TruncateTime(gt.DataDocumento) >= dI) && (System.Data.Entity.DbFunctions.TruncateTime(gt.DataDocumento) <= dF));
                    }

                    if (!String.IsNullOrWhiteSpace(state))
                    {
                        query = query.Where(gt => gt.EstadoAT == state);
                    }

                    if (!String.IsNullOrWhiteSpace(numDoc))
                    {
                        query = query.Where(gt => gt.NumeroDocumento == numDoc);
                    }

                    if (!String.IsNullOrWhiteSpace(nifRecetor))
                    {
                        query = query.Where(gt => gt.NIFReceptor == nifRecetor);
                    }

                    if (!String.IsNullOrWhiteSpace(pesquisa))
                    {
                        query = query.Where(gt =>
                        gt.NIFReceptor.ToLower().Contains(pesquisa)
                        ||
                        gt.NumeroDocumento.ToLower().Contains(pesquisa)
                        ||
                        gt.EstadoAT.Contains(pesquisa)
                        ||
                        gt.ObsRetornoAT.ToLower().Contains(pesquisa)
                        ||
                        (System.Data.Entity.DbFunctions.TruncateTime(gt.DataDocumento) == tmp || System.Data.Entity.DbFunctions.TruncateTime(gt.LastSentDate) == tmp));

                    }

                    newlist = query
                            .OrderByDescending(x => x.LastSentDate)
                            .ToList();
                }
            }
            catch (Exception e)
            {
                throw;
            }

            return newlist;
        }

        /// <summary>
        /// Returns the number of rows in table
        /// </summary>
        /// <returns></returns>
        public int Count()
        {
            try
            {
                using (EBC_DB entidadeEBC = new EBC_DB())
                {
                    return entidadeEBC.ComATPackets.Count();
                }
            }
            catch (Exception e)
            {
                throw;
            }
        }

        public List<ComATPackets> GetComATPackets()
        {
            List<ComATPackets> finalList;

            try
            {
                using (EBC_DB entidadeEBC = new EBC_DB())
                {
                    finalList = entidadeEBC.ComATPackets.OrderByDescending(x => x.LastSentDate).ToList();
                }
            }
            catch (Exception e)
            {
                throw;
            }
            return finalList;
        }

        public List<ComATPackets> GetComATPackets(string pesquisa)
        {
            throw new NotImplementedException();
        }
    }

    //public class ComATPacketsRepository : GenericRepository<IeBillingSuiteEBCDBContext, ComATPackets>, IComATPacketsRepository
    //{
    //	[Inject]
    //	public ComATPacketsRepository(IeBillingSuiteEBCDBContext context)
    //		: base(context)
    //	{
    //	}

    //       public int Count()
    //       {
    //           throw new NotImplementedException();
    //       }

    //       public List<ComATPackets> GetComATPackets()
    //	{
    //		return Set.ToList();
    //	}


    //	public List<ComATPackets> GetComATPackets(string pesquisa)
    //	{
    //		List<ComATPackets> newlist = this.Where(gt => gt.NIFReceptor.ToLower().Contains(pesquisa.ToLower())
    //			||
    //			gt.NumeroDocumento.ToLower().Contains(pesquisa.ToLower())
    //			||
    //			gt.LastSentDate.ToString().Contains(pesquisa.ToLower())
    //			||
    //			gt.DataDocumento.ToString().Contains(pesquisa.ToLower())
    //			||
    //			gt.TotalComIva.ToString().Contains(pesquisa.ToLower())
    //			||
    //			gt.EstadoAT.Contains(pesquisa.ToLower())
    //			||
    //			gt.ObsRetornoAT.ToLower().Contains(pesquisa.ToLower())).ToList();

    //		return newlist;
    //	}
    //}
}
