@model eBillingSuite.ViewModels.EBCSenderXmlMappingVM
@{
	var isAjax = Request.IsAjaxRequest();
	Layout = isAjax ? null : "~/Views/Shared/_eConnectorSendersLayout.cshtml";
}
@*@if (!isAjax)
	{*@
<script>
	var oTable;

	function InitTable() {
		oTable = $('#jq-datatables').dataTable({

			"language": {
				"url": '@this.GetjQDataTableLanguageUrl()'
			},
			"aaSorting": [],
			"iDisplayLength": 10,
		});
		$('#jq-datatables_wrapper .table-caption').text('');
		$('#jq-datatables_wrapper .dataTables_filter input').attr('placeholder', 'Procurar');
	}

	init.push(function () {
		$('a[data-toggle=tooltip]').tooltip();
		InitTable();
		ajaxInitPanelFunctions['init-jqtable'] = InitTable;

		$('#mapbtt').click(function (e) {
			e.preventDefault();
			var selectedInstance = $('#FkInstance').val();
			var selectedSender = $('#FkSender').val();
			var selectedXmlToMap = $('#XmlToMap').val();
			var selectedXmlBase = $('#XmlBase').val();
			if (!selectedInstance || !selectedSender || !selectedXmlToMap || !selectedXmlBase) {
				$('#alertMessage').text('Campos por preencher.'); //TODO: Dicionario
				$('#alert-3').slideDown();
				return;
			}

			if (selectedXmlToMap == selectedXmlBase) {
				$('#alertMessage').text('Os XML escolhidos são iguais.'); //TODO: Dicionario
				$('#alert-3').slideDown();
				return;
			}

			$('#alert-3').slideUp();
			window.location = '@Html.Raw(Url.Action("XmlMapping", new { i = "instance", s = "sender", sx = "tomap", bx = "base" }))'
				.replace("instance", selectedInstance).replace("sender", selectedSender).replace("tomap", selectedXmlToMap).replace("base", selectedXmlBase);
		});

		$('form').submit(function () {
			$(oTable.fnGetHiddenNodes()).appendTo(this);
		});

		//Close alert
		$('.page-alert .close').click(function (e) {
			e.preventDefault();
			$(this).closest('.page-alert').slideUp();
		});
	});
</script>
@*}*@

<div class="page-alerts-3">
	<div class="alert alert-danger page-alert" id="alert-3" style="display: none;">
		<button type="button" class="close"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
		<strong id="alertMessage"></strong>
	</div>
</div>

<div class="tab-pane panel no-padding no-border fade in active"
	 data-rel="ajax-update-panel"
	 id="ConnectorSenderXmlConfig"
	 data-update-init="init-jqtable"
	 data-modal-size="modal-lg">
	<div class="panel-heading">
		<span class="panel-title">@this.Get(DictionaryEntryKeys.eConnectorSendersXmlTitle)</span>
	</div>
	<div class="panel-body">
		<div class="row">
			@Html.PixelAdminSelectWithColFor(e => e.FkInstance, Model.AvailableInstances, 4, null, InputOptions.Default)
			@Html.PixelAdminSelectWithColFor(e => e.FkSender, Model.AvailableSenders, 4, null, InputOptions.Default)
		</div>
		<div class="row">
			@Html.PixelAdminSelectWithColFor(e => e.XmlToMap, Model.AvailableXmlsToMap, 4, null, InputOptions.Default)
			@Html.PixelAdminSelectWithColFor(e => e.XmlBase, Model.AvailableXmlsBase, 4, null, InputOptions.Default)
		</div>
		<div class="row">
			<div class="col-sm-4">
				<button id="mapbtt" class="btn btn-primary">@this.Get(DictionaryEntryKeys.MapXml)</button>
			</div>
		</div>
	</div>
	@if (Model.FkInstance != null && Model.FkInstance != Guid.Empty && Model.FkSender != null && Model.FkSender != Guid.Empty && !String.IsNullOrWhiteSpace(Model.XmlBase) && !String.IsNullOrWhiteSpace(Model.XmlToMap))
	{
		<form method="post" action="@Url.Action("XmlMapping", new { i = Model.FkInstance, s = Model.FkSender, sx = Model.XmlToMap, bx = Model.XmlBase })">
			<div id="panHead" class="panel-heading">
				<span class="panel-title">@this.Get(DictionaryEntryKeys.XmlFieldsList)</span>
				<div class="panel-heading-controls">
				</div>
			</div>
			<div id="panBody2" class="panel-body">
				<div class="table-primary">
					<table cellpadding="0"
						   cellspacing="0"
						   border="0"
						   class="table table-striped table-bordered"
						   id="jq-datatables">
						<thead>
							<tr>
								<th>@this.Get(DictionaryEntryKeys.SupplierXml)</th>
								<th>@this.Get(DictionaryEntryKeys.BaseXml)</th>
							</tr>
						</thead>
						<tbody>
							@for (int pos = 0; pos < Model.MapRows.Count; pos++)
							{
								<tr>
									@Html.HiddenFor(e => e.MapRows[pos].ToMapXmlPath)
									@Html.HiddenFor(e => e.MapRows[pos].ToMapXmlFieldPkid)
									<td>@Model.MapRows[pos].ToMapXmlPath</td>
									<td>
										<div class="row">
											<div class="col-lg-12">
												<div class="form-group no-margin-hr">
													@Html.DropDownListFor(e =>  e.MapRows[pos].BaseXmlFieldPkid, Model.AvailableXmlBaseFields, null, new { @class = "form-control" })
												</div>
											</div>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			<div class="panel-footer text-right">
				<button class="btn btn-primary">@this.Get(DictionaryEntryKeys.Submit)</button>
			</div>
		</form>
	}
</div>
