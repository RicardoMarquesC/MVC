using eBillingSuite.Enumerations;
using eBillingSuite.Globalization.Generators;
using eBillingSuite.Model;
using eBillingSuite.Model.EBC_DB;
using eBillingSuite.Model.eBillingConfigurations;
using eBillingSuite.Models;
using eBillingSuite.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace eBillingSuite.ViewModels
{
	public class EBCConfigurationsVM
	{
		private List<EBC_Config> model;
		private IEConnectorConfigsRepository _eBCConfigurationsRepository;
		private IInstancesRepository _instancesRepository;
		public SaphetyCredentials _saphetyCred;
		private IeBillingSuiteRequestContext _context;


		public EBCConfigurationsVM(List<EBC_Config> model, 
			IEConnectorConfigsRepository _eBCConfigurationsRepository, 
			IInstancesRepository _instancesRepository, SaphetyCredentials saphetyCred,
			IeBillingSuiteRequestContext context)
		{
			this.model = model;
			this._eBCConfigurationsRepository = _eBCConfigurationsRepository;
			this._instancesRepository = _instancesRepository;
			this._saphetyCred = saphetyCred;
			this.FKInstanceID = model[0].FKInstanceID;
			this._context = context;

			var values = _instancesRepository.GetEBC_Instances();
			AvailableInstances = values
				.Select(v => new SelectListItem
				{
					Text = v.Name,
					Value = v.PKID.ToString(),
					Selected = v.PKID == this.model[0].FKInstanceID
				})
				.ToList();

			Configs = new List<ConfigInformation>();
			//e agora começa o caos
			foreach(EBC_Config config in model)
			{
				ConfigInformation ci = new ConfigInformation();
				ci.PKID = config.PKID;
				ci.Text = GetConfigName(config.KeyName);
				if (config.KeyValue.Trim().ToLower().Equals("true"))
				{
					ci.Value = true;
					ci.isSwitcher = true;
				}
				else if (config.KeyValue.Trim().ToLower().Equals("false"))
				{
					ci.Value = false;
					ci.isSwitcher = true;
				}
				else
				{ 
					ci.Value = config.KeyValue;
					ci.isSwitcher = false;
				}
				Configs.Add(ci);
			}

			List<TipoProtocolo> Protocols = new List<TipoProtocolo>();
			TipoProtocolo t1 = new TipoProtocolo { id = 1, valor = ReceptionProtocols.POP3 };
			TipoProtocolo t2 = new TipoProtocolo { id = 2, valor = ReceptionProtocols.IMAP4 };
			TipoProtocolo t3 = new TipoProtocolo { id = 3, valor = ReceptionProtocols.HTTP };
			Protocols.Add(t1); Protocols.Add(t2); Protocols.Add(t3);

			string selectedProtocol = _eBCConfigurationsRepository
						.Where(ebcc => ebcc.FKInstanceID == FKInstanceID && ebcc.KeyName == "ReceptionProtocol").Select(ebcc => ebcc.KeyValue).FirstOrDefault();

			AvailableProtocols = Protocols
				.Select(t => new SelectListItem
				{
					Text = t.valor,
					Value = t.id.ToString(),
					Selected = t.valor == selectedProtocol
					})
				.ToList();
			
        }

		private string GetConfigName(string KeyName)
		{
            if (KeyName.Equals("Intragrupo"))
                return "Instâncias Intra-Grupo?";
            else if (KeyName.Equals("username"))
                return "Utilizador(POP3/IMAP4)";
            else if (KeyName.Equals("imap4ServerPort"))
                return "Porta";
            else if (KeyName.Equals("httpserver"))
                return "Servidor de HTTP MAIL";
            else if (KeyName.Equals("smtpPassword"))
                return "Palavra-chave Servidor SMTP";
            else if (KeyName.Equals("imap4Server"))
                return "Servidor de IMAP4";
            else if (KeyName.Equals("smtpauthenticate"))
                return "Autenticação de Servidor de SMTP";
            else if (KeyName.Equals("smtpServer"))
                return "Servidor de SMTP";
            else if (KeyName.Equals("smtpUserName"))
                return "Utilizador Servidor SMTP";
            else if (KeyName.Equals("emailAddress"))
                return "Endereço de Correio Electrónico";
            else if (KeyName.Equals("EnvioAT"))
                return "Comunicação com AT por Faturação Eletrónica";
            else if (KeyName.Equals("FicheiroTXT"))
                return "Usa Ficheiro TXT";
            else if (KeyName.Equals("pop3Server"))
                return "Servidor de POP3";
            else if (KeyName.Equals("REP_LogFiles"))
                return "Monitorização dos Log Files";
            else if (KeyName.Equals("password"))
                return "Palavra-chave (POP3/IMAP4)";
            else if (KeyName.Equals("emailName"))
                return "Nome";
            else if (KeyName.Equals("IMAP4Folder"))
                return "Pasta IMAP4";
            else if (KeyName.Equals("notificationEmailMonitoring"))
                return "Endereço de notificações de monitorização";
            else if (KeyName.Equals("ComATFichGuias"))
                return "Ficheiro de Estado Comunicações AT - Transportes";
            else if (KeyName.Equals("httpserverport"))
                return "Porta";
            else if (KeyName.Equals("pop3Port"))
                return "Porta";
            else if (KeyName.Equals("ComATFich"))
                return "Ficheiro de Estado Comunicações AT - Facturas";
            else if (KeyName.Equals("smtpPort"))
                return "Porta";
            else if (KeyName.Equals("smtpSSL"))
                return "SMTP Seguro";
            else if (KeyName.Equals("ReceptionProtocol"))
                return "Protocolo de Recepção";
            else if (KeyName.Equals("pop3imap4SSL"))
                return "POP3/IMAP4 Seguro";
            else if (KeyName.Equals("saphetyIntegration"))
                return "Integração Saphety";
            else if (KeyName.Equals("usesEmailLink"))
                return "Usa Email com Link";
            else if (KeyName.Equals("smtpDomainForMessageID"))
                return "Message ID domain (SMTP)";
            else if (KeyName.Equals("usePDFWS"))
                return "Usa WS para assinar PDFs";
			else
                return null;
			////////MUDAR PARA QUANDO FOR PARA PRODUCAO
			//return _context.GetDictionaryValue(KeyName);
		}

		[DoNotGenerateDictionaryEntry]
		public System.Guid PKID { get; set; }
		[DoNotGenerateDictionaryEntry]
		public int ConfigurationKey { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string KeyName { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string KeyValue { get; set; }
		public System.Guid FKInstanceID { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string NotificationInfo { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string ConfigSuiteType { get; set; }

		[DoNotGenerateDictionaryEntry]
		public IEnumerable<SelectListItem> AvailableInstances { get; private set; }

		[DoNotGenerateDictionaryEntry]
		public IEnumerable<SelectListItem> AvailableProtocols { get; private set; }
		
		[DoNotGenerateDictionaryEntry]
		public List<ConfigInformation> Configs {get;set;}

		[DoNotGenerateDictionaryEntry]
		public class ConfigInformation
		{
			public string Text {get;set;}
			public object Value { get; set; }
			public Guid PKID { get; set; }
			public bool isSwitcher { get; set; }
		}

		[DoNotGenerateDictionaryEntry]
		public class TipoProtocolo
		{
			public int id { get; set; }
			public string valor { get; set; }
		}

	}
}