using eBillingSuite.Globalization;
using eBillingSuite.Models;
using eBillingSuite.Repositories;
using eBillingSuite.ViewModels;
using MvcFlash.Core;
using MvcFlash.Core.Extensions;
using Shortcut.PixelAdmin;
using System;
using System.Web.Mvc;
using eBillingSuite.Model.HelpingClasses;
using System.Collections.Generic;
using System.Linq;
using eBillingSuite.Security;
using eBillingSuite.Model.EBC_DB;

namespace eBillingSuite.Controllers
{
    public class eMCATController : Controller
    {
		private IPixelAdminPageContext _pixelAdminPageContext;
		private IComATPacketsRepository _comATPacketsRepository;
		private IComATPacketsGuiasRepository _comATPacketsGuiasRepository;
		private ICredentialsRepository _credentialsRepository;
		private IInstancesRepository _instancesRepository;
		private IMCATSendingDefinitionsRepository _mCATSendingDefinitionsRepository;
		protected readonly IeBillingSuiteRequestContext _context;

		public eMCATController(
			IPixelAdminPageContext pixelAdminPageContext,
			IComATPacketsRepository comATPacketsRepository,
			IComATPacketsGuiasRepository comATPacketsGuiasRepository,
			ICredentialsRepository credentialsRepository,
			IInstancesRepository instancesRepository,
			IMCATSendingDefinitionsRepository mCATSendingDefinitionsRepository,
			IeBillingSuiteRequestContext context)
		{
			_pixelAdminPageContext = pixelAdminPageContext;
			_comATPacketsRepository = comATPacketsRepository;
			_comATPacketsGuiasRepository = comATPacketsGuiasRepository;
			_credentialsRepository = credentialsRepository;
			_instancesRepository = instancesRepository;
			_mCATSendingDefinitionsRepository = mCATSendingDefinitionsRepository;
			_context = context;
		}

		[PersonAuthorize(Permissions.EMCAT_FATURAS)]
		public ActionResult Index(JQueryDataTableParamModel param)
		{
			this.SetPixelAdminPageContext(_pixelAdminPageContext);

			if (!_context.UserIdentity.IsMCATActive)
				return View("InactiveModule");

			IEnumerable<ComATPackets> filteredFacts;
			IEnumerable<ComATPackets> displayedFacts;

			var model = _comATPacketsRepository.GetComATPackets();

			if (!string.IsNullOrWhiteSpace(param.sSearch))
				filteredFacts = _comATPacketsRepository.GetComATPackets(param.sSearch);
			else
				filteredFacts = model;

			//para a ordenação
			var isNIFReceptorSortable = Convert.ToBoolean(Request["bSortable_1"]);
			var isNumeroDocumentoSortable = Convert.ToBoolean(Request["bSortable_2"]);
			var isDataDocumentoSortable = Convert.ToBoolean(Request["bSortable_3"]);
			var isTotalComIvaSortable = Convert.ToBoolean(Request["bSortable_4"]);
			var isEstadoATSortable = Convert.ToBoolean(Request["bSortable_5"]);
			var isObsRetornoATSortable = Convert.ToBoolean(Request["bSortable_6"]);
			var isLastSentDateSortable = Convert.ToBoolean(Request["bSortable_7"]);
			var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);

			Func<ComATPackets, string> orderingFunction = (c => sortColumnIndex == 0 && isNIFReceptorSortable ? c.NIFReceptor :
														   sortColumnIndex == 1 && isNumeroDocumentoSortable ? c.NumeroDocumento :
														   sortColumnIndex == 2 && isDataDocumentoSortable ? c.DataDocumento.ToString() :
														   sortColumnIndex == 3 && isTotalComIvaSortable ? c.TotalComIva.ToString() :
														   sortColumnIndex == 4 && isEstadoATSortable ? c.EstadoAT :
														   sortColumnIndex == 5 && isObsRetornoATSortable ? c.ObsRetornoAT :
														   sortColumnIndex == 6 && isLastSentDateSortable ? c.LastSentDate.ToString() :
														   "");

			var sortDirection = Request["sSortDir_0"]; // asc or desc
			if (sortDirection == "asc")
				filteredFacts = filteredFacts.OrderBy(orderingFunction);
			else
				filteredFacts = filteredFacts.OrderByDescending(orderingFunction);

			if (param.iDisplayLength != 0)
			{
				displayedFacts = filteredFacts.Skip(param.iDisplayStart).Take(param.iDisplayLength);
				var result = from c in displayedFacts select new[] { c.NIFReceptor, c.NumeroDocumento, c.DataDocumento.ToShortDateString(), 
					c.TotalComIva.ToString(), c.EstadoAT, c.ObsRetornoAT, c.LastSentDate.ToDataTableShortFormat()};
				return Json(new
				{
					sEcho = param.sEcho,
					iTotalRecords = model.Count(),
					iTotalDisplayRecords = filteredFacts.Count(),
					aaData = result
				},
				JsonRequestBehavior.AllowGet);
			}
			else
			{
				displayedFacts = filteredFacts.Skip(0).Take(10);
				model = displayedFacts.ToList();

				if (Request.IsAjaxRequest())
					return Json(this.PanelContentReply(model), JsonRequestBehavior.AllowGet);
				else
					return View(model);
			}
		}

		[PersonAuthorize(Permissions.EMCAT_GUIASTRANSPORTES)]
		public ActionResult Guias(JQueryDataTableParamModel param)
		{
			this.SetPixelAdminPageContext(_pixelAdminPageContext);

			IEnumerable<ComATPackets_Guias> filteredGuias;
			IEnumerable<ComATPackets_Guias> displayedGuias;

			var model = _comATPacketsGuiasRepository
						.GetComATPacketsGuias();

			if (!string.IsNullOrWhiteSpace(param.sSearch))
				filteredGuias = _comATPacketsGuiasRepository.GetComATPacketsGuias(param.sSearch);
			else
				filteredGuias = model;

			//para a ordenação
			var isNumeroDocumentoSortable = Convert.ToBoolean(Request["bSortable_1"]);
			var isLastSentDateSortable = Convert.ToBoolean(Request["bSortable_2"]);
			var isATDocCodeIDSortable = Convert.ToBoolean(Request["bSortable_3"]);
			var isEstadoATSortable = Convert.ToBoolean(Request["bSortable_4"]);
			var isObsRetornoATSortable = Convert.ToBoolean(Request["bSortable_5"]);
			var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);

			Func<ComATPackets_Guias, string> orderingFunction = (c => sortColumnIndex == 0 && isNumeroDocumentoSortable ? c.NumeroDocumento :
														   sortColumnIndex == 1 && isLastSentDateSortable ? c.LastSentDate.ToString() :
														   sortColumnIndex == 2 && isATDocCodeIDSortable ? c.ATDocCodeID :
														   sortColumnIndex == 3 && isEstadoATSortable ? c.EstadoAT :
														   sortColumnIndex == 4 && isObsRetornoATSortable ? c.ObsRetornoAT :
														   "");

			var sortDirection = Request["sSortDir_0"]; // asc or desc
			if (sortDirection == "asc")
				filteredGuias = filteredGuias.OrderBy(orderingFunction);
			else
				filteredGuias = filteredGuias.OrderByDescending(orderingFunction);

			if (param.iDisplayLength != 0)
			{
				//filteredGuias = model;
				displayedGuias = filteredGuias.Skip(param.iDisplayStart).Take(param.iDisplayLength);

				var result = from c in displayedGuias select new[] { c.NumeroDocumento, c.LastSentDate.ToDataTableShortFormat(), c.ATDocCodeID, c.EstadoAT, c.ObsRetornoAT };
				return Json(new
				{
					sEcho = param.sEcho,
					iTotalRecords = model.Count(),
					iTotalDisplayRecords = filteredGuias.Count(),
					aaData = result
				},
				JsonRequestBehavior.AllowGet);
			}
			else
			{
				//filteredGuias = model;
				displayedGuias = filteredGuias.Skip(0).Take(10);
				model = displayedGuias.ToList();

				if (Request.IsAjaxRequest())
					return Json(this.PanelContentReply("Guias", model), JsonRequestBehavior.AllowGet);
				else
					return View("Guias", model);
			}	
		}

		[PersonAuthorize(Permissions.EMCAT_CONFIGURACOESENVIO)]
		public ActionResult Configurations(Guid? ID)
		{
			this.SetPixelAdminPageContext(_pixelAdminPageContext);

			var model = _mCATSendingDefinitionsRepository.GetConfigEnvioAT(ID);
			var modelVM = new MCATSendingConfigVM(
				model,
				null,
				_mCATSendingDefinitionsRepository,
				_instancesRepository, ID);

			if (Request.IsAjaxRequest())
				return Json(this.PanelContentReply(modelVM), JsonRequestBehavior.AllowGet);
			else
				return View(modelVM);
		}

		[HttpPost]
		[PersonAuthorize(Permissions.EMCAT_CONFIGURACOESENVIO)]
		public ActionResult Configurations(Guid? fkInstancia, MCATConfigSendInfoData data)
		{
			var dataFromDB = _mCATSendingDefinitionsRepository.GetConfigEnvioAT(fkInstancia);
			bool exists = true;
			if (!ModelState.IsValid)
			{
				this.SetPixelAdminPageContext(_pixelAdminPageContext);

				return View(new MCATSendingConfigVM(dataFromDB, data, _mCATSendingDefinitionsRepository, _instancesRepository, fkInstancia));
			}

			if(dataFromDB == null)
			{
				exists = false;
				dataFromDB = new ConfigEnvioAT();
				dataFromDB.EnderecoEmail = data.EnderecoEmail;
				dataFromDB.UnidadeTempo = data.UnidadeTempo;
				dataFromDB.TipoUnidadeTempo = data.TipoUnidadeTempo;
				dataFromDB.NumberOfAttempts = data.NumberOfAttempts;
				dataFromDB.fkInstancia = fkInstancia.ToString();
				dataFromDB.pkid = Guid.NewGuid();
			}
			else
			{ 
				dataFromDB.EnderecoEmail = data.EnderecoEmail;
				dataFromDB.UnidadeTempo = data.UnidadeTempo;
				dataFromDB.TipoUnidadeTempo = data.TipoUnidadeTempo;
				dataFromDB.NumberOfAttempts = data.NumberOfAttempts;
			}

			using (var dbContextTransaction = _instancesRepository.Context.Database.BeginTransaction())
			{
				try
				{					
					if(exists)
					{ 
						_mCATSendingDefinitionsRepository
							.Edit(dataFromDB)
							.Save();
					}
					else
					{
						_mCATSendingDefinitionsRepository
							.Add(dataFromDB)
							.Save();
					}
					dbContextTransaction.Commit();
				}
				catch (Exception ex)
				{
					Elmah.ErrorSignal.FromCurrentContext().Raise(ex);
					
					dbContextTransaction.Rollback();
					Flash.Instance.Error(_context.GetDictionaryValue(DictionaryEntryKeys.DBErrors));

					this.SetPixelAdminPageContext(_pixelAdminPageContext);

					return View(new MCATSendingConfigVM(dataFromDB, data, _mCATSendingDefinitionsRepository, _instancesRepository, fkInstancia));
				}
			}

			Flash.Instance.Success(_context.GetDictionaryValue(DictionaryEntryKeys.EditOperationSuccess));

			return RedirectToAction("Configurations", new { id = fkInstancia });
		}

		[PersonAuthorize(Permissions.EMCAT_DEFINICOESCREDENCIAIS)]
		public ActionResult Credentials(Guid? ID)
		{
			this.SetPixelAdminPageContext(_pixelAdminPageContext);

			var model = _credentialsRepository.GetLoginATByID(ID);
			var modelVM = new CredentialsVM(
				model,
				null,
				_credentialsRepository,
				_instancesRepository);

			if (Request.IsAjaxRequest())
				return Json(this.PanelContentReply(modelVM), JsonRequestBehavior.AllowGet);
			else
				return View(modelVM);
		}

		[HttpPost]
		[PersonAuthorize(Permissions.EMCAT_DEFINICOESCREDENCIAIS)]
		public ActionResult Credentials(Guid fkEmpresa, CredentialsData data)
		{
			var dataFromDB = _credentialsRepository.GetLoginATByID(fkEmpresa);

			if (!ModelState.IsValid)
			{
				this.SetPixelAdminPageContext(_pixelAdminPageContext);

				return View(new CredentialsVM(dataFromDB,data, _credentialsRepository, _instancesRepository));
			}

			dataFromDB.usrat = data.usrat;
			dataFromDB.pwdat = data.pwdat;

			using (var dbContextTransaction = _instancesRepository.Context.Database.BeginTransaction())
			{
				try
				{
					_credentialsRepository
						.Edit(dataFromDB)
						.Save();

					dbContextTransaction.Commit();
				}
				catch (Exception ex)
				{
					Elmah.ErrorSignal.FromCurrentContext().Raise(ex);

					dbContextTransaction.Rollback();
					Flash.Instance.Error(_context.GetDictionaryValue(DictionaryEntryKeys.DBErrors));

					this.SetPixelAdminPageContext(_pixelAdminPageContext);

					return View(new CredentialsVM(dataFromDB, data, _credentialsRepository, _instancesRepository));
				}
			}

			Flash.Instance.Success(_context.GetDictionaryValue(DictionaryEntryKeys.EditOperationSuccess));

			return RedirectToAction("Credentials", new { id = fkEmpresa });
		}

		public ActionResult InactiveModule()
		{
			this.SetPixelAdminPageContext(_pixelAdminPageContext);

			//string inactiveModuleText = _context.GetDictionaryValue(DictionaryEntryKeys.InactiveModuleAlertText);

			return View();
		}
    }
}