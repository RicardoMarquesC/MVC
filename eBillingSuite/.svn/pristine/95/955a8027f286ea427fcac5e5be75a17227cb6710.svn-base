using eBillingSuite.Globalization.Generators;
using eBillingSuite.Model;
using eBillingSuite.Model.EBC_DB;
using eBillingSuite.Models;
using eBillingSuite.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace eBillingSuite.ViewModels
{
	public class EBCDigitalCertificateVM
	{
		private List<EBC_Config> model;
		private IECCListRepositories _eCConfigRepositories;
		private IeBillingSuiteRequestContext _context;

		public EBCDigitalCertificateVM(List<EBC_Config> model,
			IECCListRepositories eCConfigRepositories,
			IeBillingSuiteRequestContext _context)
		{
			this.model = model;
			this._eCConfigRepositories = eCConfigRepositories;
			this._context = _context;
			this.FKInstanceID = model[0].FKInstanceID;
			this.SerialNumber = model[0].KeyValue;

			var values = eCConfigRepositories.instancesRepository.GetEBC_Instances();
			AvailableInstances = values
			.Select(v => new SelectListItem
			{
				Text = v.Name,
				Value = v.PKID.ToString(),
				Selected = v.PKID == this.model[0].FKInstanceID
			})
			.ToList();

			var certificates = eCConfigRepositories.eBCCertificatesRepository.GetAllAvailableCertificates();
			AvailableCertificates = certificates
				.Select(v => new SelectListItem
				{
					Text = v.SubjectName.Name + " , " + v.GetExpirationDateString(),
					Value = v.SerialNumber,
					Selected = v.SerialNumber.ToLower() == SerialNumber.ToLower()
				})
				.ToList();
			
			var markets = eCConfigRepositories.eBCMarketsRepository
				.Set
				.ToList();

			this.MarketInfo = eCConfigRepositories.eBCMarketCertificatesRepository
					.GetMarketInfoByID(this.model[0].FKInstanceID, 
					markets.Where(m => m.Mercado == "Portugal").FirstOrDefault().pkid);

			AvailableMarkets = markets
				.Select(v => new SelectListItem
				{
					Text = v.Mercado,
					Value = v.pkid.ToString(),
					Selected = v.pkid == MarketInfo.fkMercado
				})
				.ToList();

			Configs = new List<ConfigInformation>();
			foreach (EBC_Config config in model)
			{
				ConfigInformation ci = new ConfigInformation();
				ci.PKID = config.PKID;
				ci.Text = GetConfigName(config.KeyName);
				if (config.KeyValue.ToLower().Equals("true"))
				{
					ci.Value = true;
					ci.isSwitcher = true;
				}
				else if (config.KeyValue.ToLower().Equals("false"))
				{
					ci.Value = false;
					ci.isSwitcher = true;
				}
				else
				{
					ci.Value = config.KeyValue;
					ci.isSwitcher = false;
				}
				Configs.Add(ci);
			}

			///GET THE CERTDETAILS from the table
			CertDetails = eCConfigRepositories
				.eCertificatesDetailsRepository
				.GetCertSignaturaDetailsByInstanceMarket(this.model[0].FKInstanceID, this.MarketInfo.fkMercado);

			if(CertDetails == null)
			{
				CertDetails = new EBC_CertSignatureDetails
				{
					fkInstance = this.model[0].FKInstanceID,
					fkMercado = this.MarketInfo.fkMercado,
					//Author = String.Empty,
					//Title = String.Empty,
					//Subject = String.Empty,
					//Keywords = String.Empty,
					//Creator = String.Empty,
					//Producer = String.Empty,
					//SigReason = String.Empty,
					//SigContact = String.Empty,
					//SigLocation = String.Empty,
					//SigVisible = false
				};
			}
		}


		[DoNotGenerateDictionaryEntry]
		public System.Guid PKID { get; set; }
		[DoNotGenerateDictionaryEntry]
		public int ConfigurationKey { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string KeyName { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string KeyValue { get; set; }
		public System.Guid FKInstanceID { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string NotificationInfo { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string ConfigSuiteType { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string SerialNumber { get; set; }
		[DoNotGenerateDictionaryEntry]
		public string NovoCaminho { get; set; }

		[DoNotGenerateDictionaryEntry]
		public List<ConfigInformation> Configs { get; set; }

		[DoNotGenerateDictionaryEntry]
		public EBC_MercadoCert MarketInfo { get; set; }

		public EBC_CertSignatureDetails CertDetails { get; set; }

		[DoNotGenerateDictionaryEntry]
		public class ConfigInformation
		{
			public string Text { get; set; }
			public object Value { get; set; }
			public Guid PKID { get; set; }
			public bool isSwitcher { get; set; }
		}

		protected string GetConfigName(string KeyName)
		{
			if (KeyName.Equals("Intragrupo"))
				return "Instâncias Intra-Grupo?";
			else if (KeyName.Equals("username"))
				return "Utilizador(POP3/IMAP4)";
			else if (KeyName.Equals("imap4ServerPort"))
				return "Porta";
			else if (KeyName.Equals("httpserver"))
				return "Servidor de HTTP MAIL";
			else if (KeyName.Equals("smtpPassword"))
				return "Password Servidor SMTP";
			else if (KeyName.Equals("imap4Server"))
				return "Servidor de IMAP4";
			else if (KeyName.Equals("smtpauthenticate"))
				return "Autenticação de Servidor de SMTP";
			else if (KeyName.Equals("smtpServer"))
				return "Servidor de SMTP";
			else if (KeyName.Equals("smtpUserName"))
				return "Utilizador Servidor SMTP";
			else if (KeyName.Equals("emailAddress"))
				return "Endereço de Correio Electrónico";
			else if (KeyName.Equals("EnvioAT"))
				return "Comunicação com AT por Faturação Eletrónica";
			else if (KeyName.Equals("FicheiroTXT"))
				return "Usa Ficheiro TXT";
			else if (KeyName.Equals("pop3Server"))
				return "Servidor de POP3";
			else if (KeyName.Equals("REP_LogFiles"))
				return "Monitorização dos Log Files";
			else if (KeyName.Equals("password"))
				return "Palavra Chave(POP3/IMAP4)";
			else if (KeyName.Equals("emailName"))
				return "Nome";
			else if (KeyName.Equals("IMAP4Folder"))
				return "Pasta IMAP4";
			else if (KeyName.Equals("notificationEmailMonitoring"))
				return "Endereço de notificações de monitorização";
			else if (KeyName.Equals("ComATFichGuias"))
				return "Ficheiro de Estado Comunicações AT - Transportes";
			else if (KeyName.Equals("httpserverport"))
				return "Porta";
			else if (KeyName.Equals("pop3Port"))
				return "Porta";
			else if (KeyName.Equals("ComATFich"))
				return "Ficheiro de Estado Comunicações AT - Facturas";
			else if (KeyName.Equals("smtpPort"))
				return "Porta";
			else if (KeyName.Equals("smtpSSL"))
				return "SMTP Seguro";
			else if (KeyName.Equals("ReceptionProtocol"))
				return "Protocolo de Recepção";
			else if (KeyName.Equals("serialNumber"))
				return "Certificado Digital";
			else if (KeyName.Equals("Interpreter"))
				return "Interpretador Postscript";
			else if (KeyName.Equals("InterpreterArguments"))
				return "Argumentos do Interpretador Postscript";
			else if (KeyName.Equals("certEmailNotification"))
				return "Alertas sobre o certificado";
			else if (KeyName.Equals("pop3imap4SSL"))
				return "POP3/IMAP4 Seguro";
			else
				return null;
			////////MUDAR PARA QUANDO FOR PARA PRODUCAO
			//return _context.GetDictionaryValue(KeyName);
		}

		[DoNotGenerateDictionaryEntry]
		public IEnumerable<SelectListItem> AvailableInstances { get; private set; }

		[DoNotGenerateDictionaryEntry]
		public IEnumerable<SelectListItem> AvailableCertificates { get; private set; }

		[DoNotGenerateDictionaryEntry]
		public IEnumerable<SelectListItem> AvailableMarkets { get; private set; }


		//public string Author { get; set; }
		//public string Title { get; set; }
		//public string Subject { get; set; }
		//public string Keywords { get; set; }
		//public string Creator { get; set; }
		//public string Producer { get; set; }
		//public string SigReason { get; set; }
		//public string SigContact { get; set; }
		//public string SigLocation { get; set; }
		//public bool SigVisible { get; set; }

	}
}